# Generated by Django 3.2.12 on 2022-08-28 14:28

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='FoodRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ngo_name', models.CharField(db_index=True, help_text='NGO name or local authority name', max_length=255, verbose_name='NGO name')),
                ('county_coverage', models.CharField(choices=[('AB', 'Alba'), ('AR', 'Arad'), ('AG', 'Argeș'), ('BC', 'Bacău'), ('BH', 'Bihor'), ('BN', 'Bistrița-Năsăud'), ('BT', 'Botoșani'), ('BV', 'Brașov'), ('BR', 'Brăila'), ('B', 'București'), ('BZ', 'Buzău'), ('CL', 'Călărași'), ('CS', 'Caraș-Severin'), ('CJ', 'Cluj'), ('CT', 'Constanța'), ('CV', 'Covasna'), ('DB', 'Dâmbovița'), ('DJ', 'Dolj'), ('GL', 'Galați'), ('GR', 'Giurgiu'), ('GJ', 'Gorj'), ('HR', 'Harghita'), ('HD', 'Hunedoara'), ('IL', 'Ialomița'), ('IS', 'Iași'), ('IF', 'Ilfov'), ('MM', 'Maramureș'), ('MH', 'Mehedinți'), ('MS', 'Mureș'), ('NT', 'Neamț'), ('OT', 'Olt'), ('PH', 'Prahova'), ('SM', 'Satu Mare'), ('SJ', 'Sălaj'), ('SB', 'Sibiu'), ('SV', 'Suceava'), ('TR', 'Teleorman'), ('TM', 'Timiș'), ('TL', 'Tulcea'), ('VS', 'Vaslui'), ('VL', 'Vâlcea'), ('VN', 'Vrancea')], max_length=3, verbose_name='county')),
                ('town', models.CharField(max_length=100, verbose_name='town')),
                ('address', models.CharField(max_length=255, verbose_name='address')),
                ('contact_person', models.CharField(max_length=255, verbose_name='contact person')),
                ('phone_number', models.CharField(max_length=32, verbose_name='phone number')),
                ('email', models.EmailField(max_length=254, verbose_name='email address')),
                ('backup_phone_number', models.CharField(blank=True, default='', max_length=32, verbose_name='backup phone number')),
                ('adult_vegetarian_portions', models.PositiveSmallIntegerField(default=0, help_text='Lunch and dinner cumulated number of vegetarian portions for adults', verbose_name='adult vegetarian portions')),
                ('child_vegetarian_portions', models.PositiveSmallIntegerField(default=0, help_text='Lunch and dinner cumulated number of vegetarian portions for children', verbose_name='child vegetarian portions')),
                ('adult_meat_portions', models.PositiveSmallIntegerField(default=0, help_text='Lunch and dinner cumulated number of meat portions for adults', verbose_name='adult meat portions')),
                ('child_meat_portions', models.PositiveSmallIntegerField(default=0, help_text='Lunch and dinner cumulated number of meat portions for children', verbose_name='child meat portions')),
                ('adult_restricted_portions', models.PositiveSmallIntegerField(default=0, help_text='Lunch and dinner cumulated number of restriction portions for adults', verbose_name='adult restricted portions')),
                ('adult_restriction_notes', models.CharField(blank=True, default='', help_text='Gluten, lactose, salt... restrictions', max_length=255, verbose_name='adult restriction notes')),
                ('child_restricted_portions', models.PositiveSmallIntegerField(default=0, help_text='Lunch and dinner cumulated number of restriction portions for children', verbose_name='child restricted portions')),
                ('child_restriction_notes', models.CharField(blank=True, default='', help_text='Gluten, lactose, salt... restrictions', max_length=255, verbose_name='adult restriction notes')),
                ('delivery_hours', models.CharField(max_length=255, verbose_name='delivery hours')),
                ('delivery_daily_frequency', models.CharField(max_length=255, verbose_name='delivery daily frequency')),
                ('preferred_packaging', models.CharField(choices=[('B', 'bulk packaging'), ('R', 'retail packaging')], default='B', max_length=1, verbose_name='preferred packaging')),
                ('notes', models.TextField(blank=True, default='', verbose_name='notes')),
                ('status', models.PositiveSmallIntegerField(choices=[(0, 'new'), (1, 'in progress'), (2, 'solved'), (3, 'rejected')], db_index=True, default=0, verbose_name='status')),
                ('created_on', models.DateTimeField(auto_now_add=True, verbose_name='created on')),
            ],
            options={
                'verbose_name': 'NGO food request',
                'verbose_name_plural': 'NGO food requests',
            },
        ),
    ]
