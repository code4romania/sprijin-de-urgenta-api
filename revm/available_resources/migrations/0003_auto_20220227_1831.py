# Generated by Django 3.2.12 on 2022-02-27 16:31

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('donors', '0001_initial'),
        ('available_resources', '0002_resource_donor_county'),
    ]

    operations = [
        migrations.CreateModel(
            name='FoodProductsResource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=50, verbose_name='resource name')),
                ('description', models.CharField(blank=True, default='', max_length=500, verbose_name='resource description')),
                ('added_on', models.DateTimeField(auto_now_add=True, verbose_name='resource added on')),
                ('available_from', models.DateTimeField(auto_now_add=True, verbose_name='resource available from')),
                ('available_until', models.DateTimeField(null=True, verbose_name='resource available until')),
                ('is_finished', models.BooleanField(default=False, help_text='Is this resource completely used up', verbose_name='resource finished')),
                ('county_coverage', models.CharField(choices=[('AB', 'Alba'), ('AR', 'Arad'), ('AG', 'Argeș'), ('BC', 'Bacău'), ('BH', 'Bihor'), ('BN', 'Bistrița-Năsăud'), ('BT', 'Botoșani'), ('BV', 'Brașov'), ('BR', 'Brăila'), ('B', 'București'), ('BZ', 'Buzău'), ('CL', 'Călărași'), ('CS', 'Caraș-Severin'), ('CJ', 'Cluj'), ('CT', 'Constanța'), ('CV', 'Covasna'), ('DB', 'Dâmbovița'), ('DJ', 'Dolj'), ('GL', 'Galați'), ('GR', 'Giurgiu'), ('GJ', 'Gorj'), ('HR', 'Harghita'), ('HD', 'Hunedoara'), ('IL', 'Ialomița'), ('IS', 'Iași'), ('IF', 'Ilfov'), ('MM', 'Maramureș'), ('MH', 'Mehedinți'), ('MS', 'Mureș'), ('NT', 'Neamț'), ('OT', 'Olt'), ('PH', 'Prahova'), ('SM', 'Satu Mare'), ('SJ', 'Sălaj'), ('SB', 'Sibiu'), ('SV', 'Suceava'), ('TR', 'Teleorman'), ('TM', 'Timiș'), ('TL', 'Tulcea'), ('VS', 'Vaslui'), ('VL', 'Vâlcea'), ('VN', 'Vrancea'), ('RO', 'Național')], max_length=2, verbose_name='county')),
                ('unit_type', models.CharField(choices=[('BOX', 'Box'), ('BOTTLE', 'Bottle')], max_length=10, verbose_name='unit type')),
                ('total_units', models.PositiveSmallIntegerField(default=0, verbose_name='total units')),
                ('expiration_date', models.DateTimeField(blank=True, null=True, verbose_name='expiration date')),
                ('pickup_town', models.CharField(max_length=100, verbose_name='pickup town')),
                ('donor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='donors.donor')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GoodsTransportService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=50, verbose_name='resource name')),
                ('description', models.CharField(blank=True, default='', max_length=500, verbose_name='resource description')),
                ('added_on', models.DateTimeField(auto_now_add=True, verbose_name='resource added on')),
                ('available_from', models.DateTimeField(auto_now_add=True, verbose_name='resource available from')),
                ('available_until', models.DateTimeField(null=True, verbose_name='resource available until')),
                ('is_finished', models.BooleanField(default=False, help_text='Is this resource completely used up', verbose_name='resource finished')),
                ('county_coverage', models.CharField(choices=[('AB', 'Alba'), ('AR', 'Arad'), ('AG', 'Argeș'), ('BC', 'Bacău'), ('BH', 'Bihor'), ('BN', 'Bistrița-Năsăud'), ('BT', 'Botoșani'), ('BV', 'Brașov'), ('BR', 'Brăila'), ('B', 'București'), ('BZ', 'Buzău'), ('CL', 'Călărași'), ('CS', 'Caraș-Severin'), ('CJ', 'Cluj'), ('CT', 'Constanța'), ('CV', 'Covasna'), ('DB', 'Dâmbovița'), ('DJ', 'Dolj'), ('GL', 'Galați'), ('GR', 'Giurgiu'), ('GJ', 'Gorj'), ('HR', 'Harghita'), ('HD', 'Hunedoara'), ('IL', 'Ialomița'), ('IS', 'Iași'), ('IF', 'Ilfov'), ('MM', 'Maramureș'), ('MH', 'Mehedinți'), ('MS', 'Mureș'), ('NT', 'Neamț'), ('OT', 'Olt'), ('PH', 'Prahova'), ('SM', 'Satu Mare'), ('SJ', 'Sălaj'), ('SB', 'Sibiu'), ('SV', 'Suceava'), ('TR', 'Teleorman'), ('TM', 'Timiș'), ('TL', 'Tulcea'), ('VS', 'Vaslui'), ('VL', 'Vâlcea'), ('VN', 'Vrancea'), ('RO', 'Național')], max_length=2, verbose_name='county')),
                ('reuses_left', models.PositiveSmallIntegerField(blank=True, help_text='How many times can this resource be used', null=True, verbose_name='reuses left')),
                ('is_infinitely_reusable', models.BooleanField(default=False, verbose_name='is infinitely reusable')),
                ('currently_in_use', models.BooleanField(default=False, verbose_name='reusable resource currently under use')),
                ('used_by', models.CharField(blank=True, max_length=200, null=True, verbose_name='used by')),
                ('usable_weight', models.PositiveSmallIntegerField(default=0, verbose_name='usable weight')),
                ('has_refrigeration', models.BooleanField(default=False, verbose_name='has refrigeration')),
                ('donor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='donors.donor')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PeopleTransportService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=50, verbose_name='resource name')),
                ('description', models.CharField(blank=True, default='', max_length=500, verbose_name='resource description')),
                ('added_on', models.DateTimeField(auto_now_add=True, verbose_name='resource added on')),
                ('available_from', models.DateTimeField(auto_now_add=True, verbose_name='resource available from')),
                ('available_until', models.DateTimeField(null=True, verbose_name='resource available until')),
                ('is_finished', models.BooleanField(default=False, help_text='Is this resource completely used up', verbose_name='resource finished')),
                ('county_coverage', models.CharField(choices=[('AB', 'Alba'), ('AR', 'Arad'), ('AG', 'Argeș'), ('BC', 'Bacău'), ('BH', 'Bihor'), ('BN', 'Bistrița-Năsăud'), ('BT', 'Botoșani'), ('BV', 'Brașov'), ('BR', 'Brăila'), ('B', 'București'), ('BZ', 'Buzău'), ('CL', 'Călărași'), ('CS', 'Caraș-Severin'), ('CJ', 'Cluj'), ('CT', 'Constanța'), ('CV', 'Covasna'), ('DB', 'Dâmbovița'), ('DJ', 'Dolj'), ('GL', 'Galați'), ('GR', 'Giurgiu'), ('GJ', 'Gorj'), ('HR', 'Harghita'), ('HD', 'Hunedoara'), ('IL', 'Ialomița'), ('IS', 'Iași'), ('IF', 'Ilfov'), ('MM', 'Maramureș'), ('MH', 'Mehedinți'), ('MS', 'Mureș'), ('NT', 'Neamț'), ('OT', 'Olt'), ('PH', 'Prahova'), ('SM', 'Satu Mare'), ('SJ', 'Sălaj'), ('SB', 'Sibiu'), ('SV', 'Suceava'), ('TR', 'Teleorman'), ('TM', 'Timiș'), ('TL', 'Tulcea'), ('VS', 'Vaslui'), ('VL', 'Vâlcea'), ('VN', 'Vrancea'), ('RO', 'Național')], max_length=2, verbose_name='county')),
                ('reuses_left', models.PositiveSmallIntegerField(blank=True, help_text='How many times can this resource be used', null=True, verbose_name='reuses left')),
                ('is_infinitely_reusable', models.BooleanField(default=False, verbose_name='is infinitely reusable')),
                ('currently_in_use', models.BooleanField(default=False, verbose_name='reusable resource currently under use')),
                ('used_by', models.CharField(blank=True, max_length=200, null=True, verbose_name='used by')),
                ('total_passengers', models.PositiveSmallIntegerField(default=1, verbose_name='total passengers')),
                ('has_disability_access', models.BooleanField(default=False, verbose_name='has disability access')),
                ('has_pet_accommodation', models.BooleanField(default=False, verbose_name='has pet accommodation')),
                ('donor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='donors.donor')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AlterModelOptions(
            name='resourcesubcategory',
            options={'verbose_name': 'resource subcategory', 'verbose_name_plural': 'resource subcategories'},
        ),
        migrations.AlterField(
            model_name='resourcecategory',
            name='description',
            field=models.CharField(blank=True, default='', max_length=500, verbose_name='category description'),
        ),
        migrations.AlterField(
            model_name='resourcecategory',
            name='name',
            field=models.CharField(db_index=True, max_length=50, verbose_name='category name'),
        ),
        migrations.AlterField(
            model_name='resourcesubcategory',
            name='description',
            field=models.CharField(blank=True, default='', max_length=500, verbose_name='subcategory description'),
        ),
        migrations.AlterField(
            model_name='resourcesubcategory',
            name='name',
            field=models.CharField(db_index=True, max_length=50, verbose_name='subcategory name'),
        ),
        migrations.DeleteModel(
            name='Resource',
        ),
        migrations.AddField(
            model_name='peopletransportservice',
            name='subcategory',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='available_resources.resourcesubcategory'),
        ),
        migrations.AddField(
            model_name='goodstransportservice',
            name='subcategory',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='available_resources.resourcesubcategory'),
        ),
        migrations.AddField(
            model_name='foodproductsresource',
            name='subcategory',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='available_resources.resourcesubcategory'),
        ),
    ]
