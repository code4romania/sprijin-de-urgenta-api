# Generated by Django 3.2.12 on 2022-03-03 01:49

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import multiselectfield.db.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=50, verbose_name='category name')),
                ('description', models.CharField(blank=True, default='', max_length=500, verbose_name='category description')),
            ],
            options={
                'verbose_name': 'category',
                'verbose_name_plural': 'categories',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TransportServiceRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(blank=True, default='', max_length=500, verbose_name='description')),
                ('added_on', models.DateTimeField(auto_now_add=True, verbose_name='added on')),
                ('status', models.CharField(choices=[('NV', 'Not Verified'), ('V', 'Verified'), ('A', 'Active'), ('D', 'Deactivated'), ('C', 'Complete')], default='NV', max_length=5, verbose_name='status')),
                ('weight_capacity', models.FloatField(blank=True, null=True, verbose_name='Capacity')),
                ('weight_unit', models.CharField(blank=True, default='t', max_length=3, null=True, verbose_name='weight unit')),
                ('has_refrigeration', models.BooleanField(blank=True, default=False, null=True, verbose_name='has refrigeration')),
                ('available_seats', models.PositiveSmallIntegerField(blank=True, default=0, null=True, verbose_name='available seats')),
                ('has_disabled_access', models.BooleanField(default=False, verbose_name='has disabled access')),
                ('pets_allowed', models.BooleanField(default=False, verbose_name='pets allowed')),
                ('from_county', models.CharField(choices=[('AB', 'Alba'), ('AR', 'Arad'), ('AG', 'Argeș'), ('BC', 'Bacău'), ('BH', 'Bihor'), ('BN', 'Bistrița-Năsăud'), ('BT', 'Botoșani'), ('BV', 'Brașov'), ('BR', 'Brăila'), ('B', 'București'), ('BZ', 'Buzău'), ('CL', 'Călărași'), ('CS', 'Caraș-Severin'), ('CJ', 'Cluj'), ('CT', 'Constanța'), ('CV', 'Covasna'), ('DB', 'Dâmbovița'), ('DJ', 'Dolj'), ('GL', 'Galați'), ('GR', 'Giurgiu'), ('GJ', 'Gorj'), ('HR', 'Harghita'), ('HD', 'Hunedoara'), ('IL', 'Ialomița'), ('IS', 'Iași'), ('IF', 'Ilfov'), ('MM', 'Maramureș'), ('MH', 'Mehedinți'), ('MS', 'Mureș'), ('NT', 'Neamț'), ('OT', 'Olt'), ('PH', 'Prahova'), ('SM', 'Satu Mare'), ('SJ', 'Sălaj'), ('SB', 'Sibiu'), ('SV', 'Suceava'), ('TR', 'Teleorman'), ('TM', 'Timiș'), ('TL', 'Tulcea'), ('VS', 'Vaslui'), ('VL', 'Vâlcea'), ('VN', 'Vrancea')], max_length=50, verbose_name='From county')),
                ('from_city', models.CharField(max_length=150, verbose_name='From city')),
                ('to_county', models.CharField(choices=[('AB', 'Alba'), ('AR', 'Arad'), ('AG', 'Argeș'), ('BC', 'Bacău'), ('BH', 'Bihor'), ('BN', 'Bistrița-Năsăud'), ('BT', 'Botoșani'), ('BV', 'Brașov'), ('BR', 'Brăila'), ('B', 'București'), ('BZ', 'Buzău'), ('CL', 'Călărași'), ('CS', 'Caraș-Severin'), ('CJ', 'Cluj'), ('CT', 'Constanța'), ('CV', 'Covasna'), ('DB', 'Dâmbovița'), ('DJ', 'Dolj'), ('GL', 'Galați'), ('GR', 'Giurgiu'), ('GJ', 'Gorj'), ('HR', 'Harghita'), ('HD', 'Hunedoara'), ('IL', 'Ialomița'), ('IS', 'Iași'), ('IF', 'Ilfov'), ('MM', 'Maramureș'), ('MH', 'Mehedinți'), ('MS', 'Mureș'), ('NT', 'Neamț'), ('OT', 'Olt'), ('PH', 'Prahova'), ('SM', 'Satu Mare'), ('SJ', 'Sălaj'), ('SB', 'Sibiu'), ('SV', 'Suceava'), ('TR', 'Teleorman'), ('TM', 'Timiș'), ('TL', 'Tulcea'), ('VS', 'Vaslui'), ('VL', 'Vâlcea'), ('VN', 'Vrancea')], max_length=50, verbose_name='To county')),
                ('to_city', models.CharField(max_length=150, verbose_name='From city')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app_transport_service.category', verbose_name='category')),
                ('made_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='requested by')),
            ],
            options={
                'verbose_name': 'transport service request',
                'verbose_name_plural': 'transport service requests',
            },
        ),
        migrations.CreateModel(
            name='TransportServiceOffer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('county_coverage', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('AB', 'Alba'), ('AR', 'Arad'), ('AG', 'Argeș'), ('BC', 'Bacău'), ('BH', 'Bihor'), ('BN', 'Bistrița-Năsăud'), ('BT', 'Botoșani'), ('BV', 'Brașov'), ('BR', 'Brăila'), ('B', 'București'), ('BZ', 'Buzău'), ('CL', 'Călărași'), ('CS', 'Caraș-Severin'), ('CJ', 'Cluj'), ('CT', 'Constanța'), ('CV', 'Covasna'), ('DB', 'Dâmbovița'), ('DJ', 'Dolj'), ('GL', 'Galați'), ('GR', 'Giurgiu'), ('GJ', 'Gorj'), ('HR', 'Harghita'), ('HD', 'Hunedoara'), ('IL', 'Ialomița'), ('IS', 'Iași'), ('IF', 'Ilfov'), ('MM', 'Maramureș'), ('MH', 'Mehedinți'), ('MS', 'Mureș'), ('NT', 'Neamț'), ('OT', 'Olt'), ('PH', 'Prahova'), ('SM', 'Satu Mare'), ('SJ', 'Sălaj'), ('SB', 'Sibiu'), ('SV', 'Suceava'), ('TR', 'Teleorman'), ('TM', 'Timiș'), ('TL', 'Tulcea'), ('VS', 'Vaslui'), ('VL', 'Vâlcea'), ('VN', 'Vrancea')], max_length=124, null=True, verbose_name='county coverage')),
                ('description', models.CharField(blank=True, default='', max_length=500, verbose_name='description')),
                ('added_on', models.DateTimeField(auto_now_add=True, verbose_name='added on')),
                ('status', models.CharField(choices=[('NV', 'Not Verified'), ('V', 'Verified'), ('A', 'Active'), ('D', 'Deactivated'), ('C', 'Complete')], default='NV', max_length=5, verbose_name='status')),
                ('weight_capacity', models.FloatField(blank=True, null=True, verbose_name='Capacity')),
                ('weight_unit', models.CharField(blank=True, default='t', max_length=3, null=True, verbose_name='weight unit')),
                ('has_refrigeration', models.BooleanField(blank=True, default=False, null=True, verbose_name='has refrigeration')),
                ('type', models.SmallIntegerField(blank=True, choices=[(1, 'National'), (2, 'County')], default=1, null=True, verbose_name='type')),
                ('availability', models.CharField(choices=[('WK', 'Disponibil in weekend'), ('WD', 'Disponibil in timpul saptamanii'), ('A', 'Disponibil oricand'), ('FI', 'Intervale fixe')], default='WK', max_length=2, verbose_name='availability')),
                ('availability_interval_from', models.TimeField(blank=True, null=True, verbose_name='from hour')),
                ('availability_interval_to', models.TimeField(blank=True, null=True, verbose_name='until hour')),
                ('driver_name', models.CharField(max_length=255, verbose_name='name')),
                ('driver_contact', models.CharField(max_length=255, verbose_name='contact')),
                ('driver_id', models.CharField(max_length=255, verbose_name='id')),
                ('car_registration_number', models.CharField(max_length=50, verbose_name='car registration number')),
                ('available_seats', models.PositiveSmallIntegerField(blank=True, default=0, null=True, verbose_name='available seats')),
                ('has_disabled_access', models.BooleanField(default=False, verbose_name='has disabled access')),
                ('pets_allowed', models.BooleanField(default=False, verbose_name='pets allowed')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app_transport_service.category', verbose_name='category')),
                ('donor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='donor')),
            ],
            options={
                'verbose_name': 'transport service offer',
                'verbose_name_plural': 'transport service offers',
            },
        ),
        migrations.CreateModel(
            name='ResourceRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(verbose_name='transport date')),
                ('description', models.TextField(blank=True, default='', max_length=500, verbose_name='description')),
                ('request', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app_transport_service.transportservicerequest', verbose_name='request')),
                ('resource', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app_transport_service.transportserviceoffer', verbose_name='donation')),
            ],
            options={
                'verbose_name': 'Offer - Request',
                'verbose_name_plural': 'Offer - Request',
            },
        ),
    ]
